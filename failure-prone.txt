caso procedural:

struct mesh: array de tris, trisCount
struct tri: arrays de dados, isIndexed, vertexAttribute (so interno), vbosids de cada array, shadr, material, vetor de texcoord
struct texcoord: vetor de texcoords(float *), set, component, count;
struct material: ambient, array diffuse (pode ser texture), specular (pode ser texture), shininess
struct texture: texid, samplerid, slot
struct node: mesh*, mat4 transformation, list children

1- mesh* initMesh(); - FEITO
    1.1 - Não recebe mais numtris pq agora usa uma lista
2- // gerar os arrays de geometria/indices
3- tri* addTris(mesh* ); - FEITO
4.1- void addVertices(tri* t, int num, int comp, float* vertices); //e outros - FEITO
4.2- void addNormals(tri* t, int num, int comp, float* normals); //e outros - FEITO
4.3- void addTexCoords(tri* t, int num, int comp, int texset, float* normals); //e outros - FEITO
4.4- void addIndices(tri* t, int count, unsigned int* indices ); - FEITO
5- initVBO(mesh* ); - FEITO


API Alto Nivel do RENDERER
//Funcoes que adicionam na lista do renderer para impedir duplicatas (objetos unicos)
1- void registerData(void* data, int type);
1.1- void registerMesh(mesh*);
1.2- void registerMaterial(material*);
1.3- void registerLight(light*);

//Funcoes de manipular o scenegraph
1- void sgAddNode(node*);
2- node* sgAddMesh(mesh*);
3- void sgSetUpdateFunc(node*, updatefunc (cloat, node) );
4- node* sginitNode();
5- void sgAddChild(node* parent, node* child);
6- node* sgRemoveChild(node* parent, node* child);
7- vec3 getPosition(node*);
8- void setPosition(node*, vec3 pos);
9- //outras funcoes de transformacao

API Baixo Nivel do RENDERER (vao/vbo, texturas, shaders, samṕler state, framebuffers)
1- shader* initShader(char*, char*); //retornar o shader*
2- void destroyShader(shader* );
3- Passar parametros - TODO - os dois casos?/definir semantics da engine/uniform buffers
4- void bindShader(shader*);

1- sampler* initSampler(int min, int max);
2- void destroySampler(sampler*);
3- void bindSampler(sampler*);

//Ver como vai ser a API de PostProcessing
1- fbo* initFBO(int x, int y, ...);
2- void destroyFBO(fbo*);
3- void bindFBO(fbo*);

1- tex* initTextureFromMem(void* data, int sizex, int sizey, int comps, unsigned, int target, int format, int internalFormat, int type);
2- tex* initTextureFromFile(char* filename, int target, int format, int internalformat, int type);
3- tex* initTextureImage( char* filename );
4- void destroyTexture();
5- void bindTexture(int slot, int texid);

//VAO E VBO feito
1- unsigned int initializeIndexVBO(int indicesCount, unsigned int* indices);
2- unsigned int initializeDataVBO(int count, int mode, void* data);//tri->vertVBO = init...(count, mode, tri->vertices);
3- void* mapVBO(unsigned int vboid, int mode);
4- void unmapVBO(unsigned int vboid);
5- unsigned int initEmptyVAO( );
6- void configureVAO(int vaoid, vertexformat*);
7- void configureIndexedVAO(int vaoid,  int indicedid, vertexformat*);
9- void destroyVAO(unsigned int);
10- void destroyVBO(unsigned int);

void render(float ticks);
void lookat(vec3, vec3, vec3);

