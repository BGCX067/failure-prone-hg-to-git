Video mode: w:  800 h: 600 depth: 0 
Renderer inicializado.
id: misil_jpg-img 
id: gun_jpg-img 
id: nave_jpg-img 
id: soporte_jpg-img 
!l->first
!l->first
!l->first
!l->first
!l->first
scena lida.
!l->first
criando vbo a:  1 
n nao eh null
configurando texset: 0
alocando alldata
vertices 
normais 
tangentes
binormais 
texcoords
inicializando vbo  para os dados 
inicializando vao 
vbo criada
t->verticesCount: 8640
criando vbo a:  1 
n nao eh null
configurando texset: 0
alocando alldata
vertices 
normais 
tangentes
binormais 
texcoords
inicializando vbo  para os dados 
inicializando vao 
vbo criada
t->verticesCount: 11232
criando vbo a:  1 
n nao eh null
configurando texset: 0
alocando alldata
vertices 
normais 
tangentes
binormais 
texcoords
inicializando vbo  para os dados 
inicializando vao 
vbo criada
t->verticesCount: 3708
criando vbo a:  1 
n nao eh null
configurando texset: 0
alocando alldata
vertices 
normais 
tangentes
binormais 
texcoords
inicializando vbo  para os dados 
inicializando vao 
vbo criada
t->verticesCount: 4104
boundingbox da cena
	pmin: -191.934998, -141.013000, -67.617500
	pmax: 189.365005, 184.535995, 94.447502
VERTEX SHADER:
#version 330 core

layout(location = 0) in vec3 vertPos;
uniform mat4 mvp;
layout(location = 2) in vec3 vertNormal;

out vec3 position;
out vec3 normal;

uniform mat4 modelview;

mat3 normalMatrix(mat4 mv) {
	vec3 x0;
	x0[0] = mv[0][0];
	x0[1] = mv[1][0];
	x0[2] = mv[2][0];
	vec3 x1;
	x1[0] = mv[0][1];
	x1[1] = mv[1][1];
	x1[2] = mv[2][1];
	vec3 x2;
	x2[0] = mv[0][2];
	x2[1] = mv[1][2];
	x2[2] = mv[2][2];
	float det = dot(x0, cross(x1, x2));
	mat3 ret;
	vec3 line0 = (1.0/det)*cross(x1, x2);
	vec3 line1 = (1.0/det)*cross(x2, x0);
	vec3 line2 = (1.0/det)*cross(x0, x1);
	ret[0] = line0;
	ret[1] = line1;
	ret[2] = line2;
	return transpose(ret);
}
void main() {
	gl_Position = mvp*vec4(vertPos, 1.0);
	position = (modelview*vec4(vertPos, 1.0)).xyz;
	mat3 normalmatrix = normalMatrix(modelview);
	normal = normalize(normalmatrix*vertNormal);
}


FRAG SHADER:
#version 330 core

out vec4 fragColor;
in vec3 normal;
in vec3 position;

uniform mat4 modelview;
uniform vec3 LightPosition;
uniform vec3 eyePosition;
uniform vec4 Ka;
uniform vec4 Kd;
uniform vec4 Ks;
uniform float shininess;
uniform vec4 globalAmbient;
uniform vec4 LightColor;
vec4 phong() {
	vec3 n = normal;	vec3 lightPos = (modelview*vec4(LightPosition, 1.0)).xyz;
	vec3 lightVec = lightPos - position;
	vec3 viewVec = normalize( -position);
	vec3 halfVec = normalize(lightVec + viewVec);
	float diffCoef = max(dot(n, lightVec), 0.0);
	float specCoef = pow(max(dot(viewVec, halfVec), 0.0), shininess);
	if (diffCoef <= 0.0)
		specCoef = 0.0;
	vec4 ambient = Ka*globalAmbient;
	vec4 diffuse = Kd*LightColor*diffCoef;
	vec4 specular = Ks*LightColor*specCoef;
	vec4 phong = ambient + diffuse + specular;
	return phong;
}
void main() {
	vec4 phongColor = phong();
	fragColor = phongColor;
}


BUTTONPRESS
BUTTONRELEASE
BUTTONPRESS
BUTTONRELEASE
